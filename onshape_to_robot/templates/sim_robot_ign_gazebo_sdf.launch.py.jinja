"""Launch the robot in Ignition Gazebo."""
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from launch import DeclareLaunchArgument, IncludeLaunchDescription, LaunchDescription
from launch.actions import (
    DeclareLaunchArgument,
    ExecuteProcess,
    FindPackageShare,
    IncludeLaunchDescription,
    RegisterEventHandler,
)
from launch.event_handlers import OnProcessExit
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.substitutions import LaunchConfiguration, PathJoinSubstitution
from launch_ros.actions import Node, RegisterEventHandler
from launch_ros.substitutions import FindPackageShare, LaunchConfiguration


def generate_launch_description():
    """Generate the launch description."""
    package = FindPackageShare("{{ package_name }}")
    use_sim_time = LaunchConfiguration("use_sim_time", default=True)
    urdf_file = PathJoinSubstitution([package, "urdf", "robot.urdf"])
    with open(urdf_file, "r", encoding="utf8") as stream:
        content = stream.read()

    node_robot_state_publisher = Node(
        package="robot_state_publisher",
        executable="robot_state_publisher",
        output="screen",
        parameters=[{"robot_description": content}],
    )

    ignition_spawn_entity = Node(
        package="ros_ign_gazebo",
        executable="create",
        output="screen",
        arguments=["-string", content],
    )

    rviz_config_file = PathJoinSubstitution([package, "rviz", "view_robot.rviz"])

    load_joint_state_broadcaster = ExecuteProcess(
        cmd=[
            "ros2",
            "control",
            "load_controller",
            "--set-state",
            "start",
            "joint_state_broadcaster",
        ],
        output="screen",
    )

    joint_state_publisher_node = Node(
        package="joint_state_publisher_gui",
        executable="joint_state_publisher_gui",
    )

    # Static TF
    static_tf = Node(
        package="tf2_ros",
        executable="static_transform_publisher",
        name="static_transform_publisher",
        output="log",
        arguments=[
            "0.0",
            "0.0",
            "0.0",
            "0.0",
            "0.0",
            "0.0",
            "world",
            "base_link",
        ],
    )

    robot_state_publisher_node = Node(
        package="robot_state_publisher",
        executable="robot_state_publisher",
        output="both",
        parameters=[robot_description],
    )

    rviz_node = Node(
        package="rviz2",
        executable="rviz2",
        name="rviz2",
        output="log",
        arguments=["-d", rviz_config_file],
    )

    nodes_to_start = [
        joint_state_publisher_node,
        static_tf,
        robot_state_publisher_node,
        rviz_node,
    ]

    ign_gazebo_launch = PathJoinSubstitution(
        [FindPackageShare("ros_ign_gazebo"), "launch", "ign_gazebo.launch.py"]
    )
    return LaunchDescription(
        [
            # Launch gazebo environment
            IncludeLaunchDescription(
                PythonLaunchDescriptionSource([ign_gazebo_launch]),
                launch_arguments=[("ign_args", [" -r -v 4 empty.sdf"])],
            ),
            RegisterEventHandler(
                event_handler=OnProcessExit(
                    target_action=ignition_spawn_entity,
                    on_exit=[load_joint_state_broadcaster],
                )
            ),
            RegisterEventHandler(
                event_handler=OnProcessExit(
                    target_action=load_joint_state_broadcaster,
                    on_exit=[load_joint_trajectory_controller],
                )
            ),
            RegisterEventHandler(
                event_handler=OnProcessExit(
                    target_action=load_joint_trajectory_controller,
                    on_exit=[load_imu_sensor_broadcaster],
                )
            ),
            node_robot_state_publisher,
            ignition_spawn_entity,
            # Launch Arguments
            DeclareLaunchArgument(
                "use_sim_time",
                default_value=use_sim_time,
                description="If true, use simulated clock",
            ),
        ]
    )
